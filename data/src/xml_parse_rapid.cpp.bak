#include "xml_parse_rapid.h"
#include <rapidxml/rapidxml.hpp>
// #include <rapidxml/rapidxml_iterators.hpp>
#include <rapidxml/rapidxml_utils.hpp>
#include<iostream>
#include<voc_xml_data_model.h>
// namespace
// {

    XmlParseRapid::XmlParseRapid(/* args */)
    {
    }

    rapidxml::xml_node<char> * XmlParseRapid::parse_objects(rapidxml::xml_node<char> *node){
        Object object;
         // get objects name
        object.name = node->value();
        auto objects_bndbox_xmax = node->next_sibling()->first_node();
        // get xmax
        object.xmax = std::stoi(objects_bndbox_xmax->value());
        auto objects_bndbox_xmin = objects_bndbox_xmax->next_sibling();
        // get xmin
        object.xmin = std::stoi(objects_bndbox_xmin->value());
        auto objects_bndbox_ymax = objects_bndbox_xmin->next_sibling();
        // get ymax
        object.ymax = std::stoi(objects_bndbox_ymax->value());
        auto objects_bndbox_ymin = objects_bndbox_ymax->next_sibling();
        // get ymin
        object.ymin = std::stoi(objects_bndbox_ymin->value());
        auto objects_diffcult = objects_bndbox_ymax->parent()->next_sibling();
        // get diffcult
        XmlParseRapid::annotation.diffcult = std::stoi(objects_diffcult->value());
        auto objects_occluded = objects_diffcult->next_sibling();
        // get occ
        XmlParseRapid::annotation.occluded = std::stoi(objects_occluded->value());
        auto objects_pose = objects_occluded->next_sibling();
        //get pose
        XmlParseRapid::annotation.pose=objects_pose->value();
        auto next_object=objects_pose->parent();
        return next_object;
    }
    rapidxml::xml_node<char> * XmlParseRapid::parse_size(rapidxml::xml_node<char> *node){
         //get size dep
        XmlParseRapid::annotation.size.depth=std::stoi(node->value());
        auto size_height=size_dep->next_sibling();
        //get size height
        XmlParseRapid::annotation.size.height=std::stoi(size_height->value());
        auto size_width=size_height->next_sibling();
        //get size width
        XmlParseRapid::annotation.size.width=std::stoi(size_width->value());
        return size_w

    }

    Annotation XmlParseRapid::parse(std::string path)
    {
        auto xml_content = rapidxml::file(path.c_str());
        rapidxml::xml_document<> document;
        document.parse<0>(xml_content.data());
        auto annotation = document.first_node();
        // get filename
        auto filename=annotation->first_node();
        XmlParseRapid::annotation.filename = filename->value();
        auto folder = filename->next_sibling();
        // get folder
        XmlParseRapid::annotation.folder = folder->value();
        auto objects_name = folder->next_sibling()->first_node();
       
        // //get segmented
        // XmlParseRapid::annotation.segmented=std::stoi(segmented->value());
        // auto size_dep=segmented->next_sibling()->first_node();
       
        return XmlParseRapid::annotation;
    }
    XmlParseRapid::~XmlParseRapid()
    {
    }
// }
